ВСТУП

     Ціль лабораторної роботи полягає в розробці серверної частини проекту за темою: «Програмна система  для управління та відстежування контейнерів». 
      Завдання включає проектування серверної частини системи з використанням різних діаграм, таких як діаграма прецедентів, діаграма компонентів, діаграма розгортання. Окрім цього, необхідно розробити базу даних та реалізувати серверну частину системи, а також написати повну документацію.
     
      Хід даної лабораторної роботи має такий вигляд:
      1) Описати архітектуру системи;
      2) Побудувати діаграму розгортання;
      3) Описати архітектуру серверної частини;
      4) Побудувати діаграму прецедентів;
      5) Побудувати  ER-Діаграми;
      6) Описати специфікацію REST;
      7) Побудувати діаграму компонентів.
      
1 ОПИС АРХІТЕКТУРИ СИСТЕМИ
      
      Для цього проекту була обрана гібридна архітектура, а саме гібрид між серверною та мікросервісною архітектурами. Ми обрали цю архітектуру з метою забезпечення оптимального балансу між гнучкістю, масштабованістю, та ефективністю управління ресурсами. Для цього проекту це може мати такі переваги:
      * Гнучкість: Використання мікросервісів дозволяє нам розділити функціональність на невеликі, незалежні компоненти, що спрощує розробку, тестування та розгортання окремих сервісів. В той же час, серверна архітектура дозволяє зберігати спільні для всієї системи функції, які можуть бути більш ефективно управлятися централізовано.
      * Масштабованість: Мікросервісна архітектура дозволяє горизонтально масштабувати окремі компоненти системи, що дозволяє збільшувати обсяг обробки завдань з ростом навантаження. У той же час, серверна архітектура може бути використана для ефективного масштабування загальних ресурсів та обробки даних.
      * Ефективне управління ресурсами: Гібридна архітектура дозволяє нам оптимізувати використання ресурсів, розподіляючи навантаження між мікросервісами та централізованими компонентами в залежності від їх функцій та потреб. Це дозволяє ефективніше використовувати обчислювальні та мережеві ресурси.
      Загалом гібридна архітектура дозволить нам комбінувати усі плюси мікросервісної архітектури, такі як гнучкість та легкість у користуванні і поєднає їх з плюсами серверної архітектури, такі як централізація системи. 
      
2  ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ
      
      Серверна частина побудована на базі Supabase, хмарної платформи, що надає функціональність бази даних PostgreSQL, а також вбудовані сервіси аутентифікації та авторизації користувачів. Це дозволяє розробникам швидко створювати та розгортати backend-частину додатків без необхідності налаштування власної інфраструктури.
      Веб-сервер, що використовує середовище виконання Node.js та фреймворк Next.js, відповідає за обробку запитів від клієнтів, виконання серверної логіки, рендеринг сторінок та взаємодію з базою даних Supabase. Next.js забезпечує високу продуктивність та зручність розробки завдяки можливості рендерингу сторінок на стороні сервера (SSR), оптимізації зображень та інших функцій.
      Для взаємодії з зовнішніми застосунками та сервісами використовується Web API, що надає стандартизований інтерфейс для доступу до даних та функціональності сервера. Це дозволяє інтегрувати систему з іншими платформами та розширювати її можливості.
      Клієнтська частина представлена веб-браузером, що використовується для доступу до веб-інтерфейсу системи, та мобільним додатком на платформі Android, що забезпечує доступ до функціональності системи на мобільних пристроях. Взаємодія з сервером здійснюється за допомогою протоколу HTTPS, що забезпечує безпечну передачу даних між клієнтом та сервером.
      Також система буде включати мікроконтролер Arduino, що дозволяє взаємодіяти з фізичними пристроями або сенсорами. Підключення Arduino до сервера може здійснюватися за допомогою різних протоколів, включаючи HTTPS, що забезпечує безпечну передачу даних між пристроями.
      
Рисунок 1 – Діаграма розгортання
            
3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ
      
     Серверна частина проекту буде побудована на основі Node.js, середовища виконання JavaScript, що забезпечує високу продуктивність та ефективність обробки запитів. Використання Node.js дозволить створити масштабований та гнучкий backend, здатний обробляти велику кількість одночасних запитів від користувачів веб-додатку та мобільного застосунку.
     Для зберігання даних буде використана PostgreSQL, реляційна база даних з відкритим вихідним кодом, що відзначається надійністю, стабільністю та широкими можливостями масштабування. PostgreSQL забезпечить збереження структурованої інформації про контейнери, користувачів, їхні ролі та інші важливі дані, необхідні для роботи системи.
     Для прискорення розробки та спрощення процесу налаштування серверної інфраструктури буде використана платформа Supabase. Вона надає зручний інтерфейс для роботи з базою даних PostgreSQL, включаючи готові функції аутентифікації, авторизації та управління доступом до даних. Це дозволить значно скоротити час та зусилля, необхідні для розгортання та підтримки серверної частини проекту, зосередившись на реалізації основної бізнес-логіки та функціональності системи.
      
4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ
      
      Розглянемо діаграму прецедентів. В системі буде три види користувачів:
      * Звичайний користувач: Має базовий доступ до системи. Може отримувати базову інформацію про контейнери.
      * Адміністратор: Володіє розширеними правами. Окрім можливостей звичайного користувача, може відстежувати контейнери за номером, переглядати список всіх користувачів системи, а також виконувати дії від імені звичайного користувача.
      * Представник компанії: Має специфічний доступ, орієнтований на роботу з контейнерами. Може виконувати дії звичайного користувача, переглядати детальну інформацію про контейнери, додавати, редагувати та видаляти контейнери.
      Функціональні можливості системи, представлені у вигляді варіантів використання, включають:
      * Робота з профілем користувача: Редагування власного профілю.
      * Робота з контейнерами: Перегляд базової або детальної інформації про контейнери, відстеження контейнерів за номером, додавання, редагування та видалення контейнерів (для представника компанії).
      * Адміністрування системи: Перегляд списку користувачів, виконання дій від імені звичайного користувача (для адміністратора).
      * Управління даними: Перегляд, додавання та видалення даних з бази даних (для адміністратора).
      Діаграму наведено у додатку А.
              
5 ПОБУДОВА ER-ДІАГРАМИ
      
      Для проектування бази даних було розроблено ER-модель даних (див. рис. 2). Вона складається з 5 таблиць: клієнт, користувач, вантаж, точка, локація.
      У базі даних наявні наступні зв’язки між сутностями:
      * Client - User: Зв'язок "один до одного" (1:1). Кожен клієнт пов'язаний з одним користувачем, і кожен користувач може бути пов'язаний лише з одним клієнтом. Це реалізується через зовнішній ключ user_id в таблиці Client.
      * Client - Cargo: Зв'язок "один до багатьох" (1:N). Один клієнт може мати багато вантажів, але кожен вантаж пов'язаний лише з одним клієнтом. Це реалізується через зовнішній ключ client_id в таблиці Cargo.
      * Cargo - Point: Зв'язок "один до багатьох" (1:N). Один вантаж може мати багато точок (які відстежують його переміщення), але кожна точка пов'язана лише з одним вантажем. Це реалізується через зовнішній ключ cargo_id в таблиці Point.
      * Location - Point: Зв'язок "один до багатьох" (1:N). Одне місцеположення може бути пов'язане з багатьма точками, але кожна точка пов'язана лише з одним місцеположенням. Це реалізується через зовнішній ключ location_id в таблиці Point.

      Рисунок 2 – ER-діаграма

6 СПЕЦИФІКАЦІЯ REST
      
      Розроблена система REST API складається з 24 кінцевих точок Для взаємодії з ними потрібно використовувати різні методи запитів, такі як: GET, POST, PUT та DELETE (див. таблиця 1).
        
7 ПОБУДОВА ДІАГРАМИ АКТИВНОСТІ
      
      Розглянемо діаграму активності, яка буде відображати дію відстеження користувачем контейнер(див. рис. 3).
          
 Рисунок 3 – Діаграма активності для перегляду інформації про контейнер
      
ВИСНОВОК
      
      Під час виконання лабораторної роботи була розроблена серверна частина програмної системи «Програмна система  для управління та відстежування контейнерів».