ВСТУП
      
      Метою даної лабораторної роботи є розробка програмного забезпечення для  IoT або SmartDevice пристрою за темою «Програмна система  для управління та відстежування контейнерів», реалізованого на базі будь-якої поширеної на  сьогодні платформи, придатної для реалізації вбудованих систем. Програмне забезпечення повинно реалізовувати розширену функціональність,  що відповідає концепції IoT або SmartDevice, та забезпечувати взаємодію з іншими частинами системи. 

1 БУДОВА ПРИСТРОЮ

      Пристрій являє собою систему моніторингу мікроклімату, побудовану на базі мікроконтролера ESP32 та цифрового датчика температури і вологості DHT22. ESP32 виконує роль керуючого центру системи, зчитуючи дані з датчика DHT22, який вимірює поточні значення температури та вологості навколишнього середовища.
      Після отримання даних з датчика, ESP32 встановлює з'єднання з Wi-Fi мережею з попередньо заданими параметрами. Далі, мікроконтролер формує JSON-об'єкт, який містить інформацію про температуру, вологість та поточний час, отриманий шляхом синхронізації з NTP-сервером. Сформований JSON-об'єкт відправляється на віддалений сервер за допомогою HTTP PUT-запиту, що дозволяє зберігати та аналізувати дані про мікроклімат у режимі реального часу.
      Код пристрою забезпечує ініціалізацію компонентів системи, встановлення з'єднання з Wi-Fi, синхронізацію часу, регулярне зчитування даних з датчика та їх відправку на сервер з інтервалом у 5 секунд. 
      Схема пристрою наведена на рисунку 1.

Рисунок 1 – Схема пристрою

2 ДІАГРАМА ПРИЦЕДЕНТІВ
      
      Розглянемо діаграму прецедентів(див. рис. 2). Діаграма описує процес роботи пристрою, який після ввімкнення підключається до мережі, вимірює температуру та вологість, відправляє ці дані на сервер, а потім може бути вимкнений.

Рисунок 2 – Діаграма прецедентів

3 ДІАГРАМА ВЗАЄМОДІЙ

      Розглянемо діаграму взаємодій(див.рис.3). Діаграма описує процес роботи пристрою Інтернету речей (IoT), який починається з вимкненого стану. Після ввімкнення пристрій намагається підключитися до Wi-Fi мережі. Якщо підключення успішне, пристрій вимірює температуру та вологість. Якщо вимірювання успішні, дані відправляються на сервер, після чого пристрій повертається до вимкненого стану. Якщо на будь-якому етапі виникає помилка (невдале підключення до Wi-Fi або невдалі вимірювання), пристрій також повертається до вимкненого стану.
     
Рисунок 3 – Діаграма взаємодій

4 ДІАГРАМА АКТИВНОСТІ

      Розглянемо діаграму активності(див.рис.4). Діаграма описує процес увімкнення пристрою, який включає підключення до Wi-Fi, збір даних та відправку їх на сервер. Якщо підключення або відправка даних не вдається, процес завершується помилкою.

Рисунок 4 – Діаграма активності
      
ВИСНОВОК

      Під час виконання даної лабораторної роботи було розроблено програмне забезпечення для IoT пристрою на базі ESP32 на мові програмування C++ для  «Програмної система для управління та відстежування контейнерів».


ДОДАТОК А
Код програми
1. #include <WiFi.h>
2. #include <HTTPClient.h>
3. #include "DHTesp.h"
4. #include "time.h"
5. 
6. const int DHT_PIN = 15;
7. 
8. DHTesp dhtSensor;
9. 
10. const char* ssid = "Wokwi-GUEST";
11. const char* password = "";
12. 
13. const String url = "";
14. const String path = "api/data/cargos/";
15. 
16. const int cargo_id = 1;
17. 
18. // Time server
19. const char* ntpServer = "pool.ntp.org";
20. 
21. unsigned long getTime() {
22. time_t now;
23. struct tm timeinfo;
24. if (!getLocalTime(&timeinfo)) {
25. Serial.println("Failed to obtain time");
26. 
27. return(0);
28. 
29. }
30. time(&now);
31. return now;
32. }
33. 
34. void newCargoStatus(float temp, float humidity) {
35. Serial.print("Sending data...");
36. 
37. HTTPClient http;
38. http.begin(url + path + cargo_id);
39. 
40. String json = "{"status":{";
41. json += ""temperature":";
42. json += temp;
43. json += ","humidity":";
44. json += humidity;
45. json += ","time":";
46. json += getTime();
47. json += "}}";
48. 
49. int httpResponseCode = http.PUT(json);
50. 
51. Serial.print("Done.\n");
52. 
53. // Serial.println(json);
54. }
55. 
56. void setup() {
57. Serial.begin(115200);
58. 
59. dhtSensor.setup(DHT_PIN, DHTesp::DHT22);
60. 
61. //Wifi Setup
62. WiFi.begin(ssid, password);
63. 
64. Serial.print("Connecting to WiFi");
65. while (WiFi.status() != WL_CONNECTED) {
66. delay(500);
67. 
68. Serial.print(".");
69. 
70. }
71. 
72. Serial.print("OK! IP=");
73. Serial.println(WiFi.localIP());
74. 
75. //Setup time
76. configTime(0, 0, ntpServer);
77. getTime();
78. }
79. 
80. void loop() {
81. //Send data
82. TempAndHumidity data = dhtSensor.getTempAndHumidity();
83. newCargoStatus(data.temperature, data.humidity);
84. 
85. delay(5000);
86. }
      
